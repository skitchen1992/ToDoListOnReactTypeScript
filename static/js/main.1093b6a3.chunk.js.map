{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","store/todolists-reducer.ts","store/tasks-reducer.ts","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","console","log","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","id","todoListId","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","onTitleChangeHandler","newValue","changeTaskTitle","key","className","isDone","Checkbox","Delete","Todolist","addTask","removeTodolist","changeTodolistTitle","tasksForTodolist","tasks","filter","t","map","style","paddingTop","Button","changeFilter","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","taskId","todolistId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeFilterAC","todoListID","action","removeTodoListAC","changeTodolistTitleAC","addTodolist","v1","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","newTask","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1093b6a3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n       if(error !== null) setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan\")\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport React, {ChangeEvent, useCallback} from \"react\";\nimport {TaskType} from \"./Todolist\";\n\n\ntype Task = {\n    todoListId: string,\n    task: TaskType,\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n\n}\nexport const Task = (props: Task) => {\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todoListId), [props.removeTask, props.task.id, props.todoListId])\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todoListId);\n    }, [props.changeTaskStatus, props.task.id, props.todoListId])\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todoListId);\n    }, [props.changeTaskTitle, props.task.id, props.todoListId])\n    return (\n        <div key={props.task.id} className={props.task.isDone ? \"is-done\" : \"\"}>\n            <Checkbox\n                checked={props.task.isDone}\n                color=\"primary\"\n                onChange={onChangeHandler}\n            />\n\n            <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n            <IconButton onClick={onClickHandler}>\n                <Delete/>\n            </IconButton>\n        </div>\n    );\n};","import React, {useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function  (props:PropsType) {\r\n    console.log(\"Todolist\")\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n    const removeTodolist =useCallback(() => {\r\n        props.removeTodolist(props.id);\r\n    },[props.removeTodolist,props.id])\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    },[props.changeTodolistTitle,props.id])\r\n\r\n    const onAllClickHandler =  () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone);\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <Task key={t.id} todoListId={props.id}\r\n                          task={t}\r\n                          removeTask={props.removeTask}\r\n                          changeTaskStatus={props.changeTaskStatus}\r\n                          changeTaskTitle={props.changeTaskTitle}/>\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {FilterValuesType, TodolistType} from \"../App\";\nimport {v1} from \"uuid\";\n\n\nexport type RemoveTodoList = {\n    type: \"REMOVE-TODOLIST\"\n    id: string\n}\nexport type AddTodolist = {\n    type: \"ADD-TODOLIST\"\n    title: string\n    todolistId:string\n}\nexport type ChangeTodolistTitle = {\n    type: \"CHANGE-TODOLIST-TITLE\"\n    title: string\n    id: string\n}\n\n\nexport type ChangeFilter = {\n    type: \"CHANGE-TODOLIST-FILTER\"\n    value: FilterValuesType,\n    id: string\n}\n\ntype ActionType = RemoveTodoList | AddTodolist | ChangeTodolistTitle | ChangeFilter\n\nexport const removeTodoListAC = (todoListID: string): RemoveTodoList => {\n    return {type: \"REMOVE-TODOLIST\", id: todoListID}\n}\nexport const addTodolistAC = (newTitleTodo: string): AddTodolist => {\n    return {type: \"ADD-TODOLIST\", title: newTitleTodo, todolistId:v1()}\n}\nexport const changeTodolistTitleAC = (title: string, id: string): ChangeTodolistTitle => {\n    return {type: \"CHANGE-TODOLIST-TITLE\", title: title, id: id}\n}\nexport const changeFilterAC = (value: FilterValuesType, id: string): ChangeFilter => {\n    return {type: \"CHANGE-TODOLIST-FILTER\", value: value, id: id}\n}\n\nconst initialState:TodolistType[]= []\n\nexport const todolistsReducer = (state: TodolistType[]=initialState, action: ActionType):TodolistType[] => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(tl => tl.id !== action.id)\n        case \"ADD-TODOLIST\":\n            return [...state, {id: action.todolistId, title: action.title, filter: 'all'}]\n        case \"CHANGE-TODOLIST-TITLE\":\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        case \"CHANGE-TODOLIST-FILTER\":\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.value} : tl)\n\n    }\n    return state\n}","import {TasksStateType} from \"../App\";\nimport {v1} from \"uuid\";\nimport {AddTodolist, RemoveTodoList} from \"./todolists-reducer\";\n\n\nexport type removeTask = {\n    type: \"REMOVE_TASK\",\n    taskId: string,\n    todoListId: string,\n\n}\nexport type SecondActionType = {\n    type: \"ADD_TASK\"\n    title: string,\n    todoListId: string\n\n}\nexport type ChangeTaskStatusType = {\n    type: \"CHANGE_TASK_STATUS\"\n    taskId: string,\n    isDone: boolean,\n    todoListId: string\n\n}\n\nexport type ChangeTaskTitleType = {\n    type: \"CHANGE_TASK_TITLE\"\n    taskId: string,\n    newTitle: string,\n    todoListId: string\n\n}\n\ntype ActionType =\n    removeTask\n    | SecondActionType\n    | ChangeTaskStatusType\n    | ChangeTaskTitleType\n    | AddTodolist\n    | RemoveTodoList\n\nexport const removeTaskAC = (taskId: string, todoListId: string): removeTask => {\n    return {type: \"REMOVE_TASK\", taskId, todoListId}\n}\nexport const addTaskAC = (title: string, todoListId: string): SecondActionType => {\n    return {type: \"ADD_TASK\", title, todoListId}\n}\n\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string): ChangeTaskStatusType => {\n    return {type: \"CHANGE_TASK_STATUS\", taskId, isDone, todoListId}\n}\n\nexport const changeTaskTitleAC = (taskId: string, newTitle: string, todoListId: string): ChangeTaskTitleType => {\n    return {type: \"CHANGE_TASK_TITLE\", taskId, newTitle, todoListId}\n}\n\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType) => {\n    switch (action.type) {\n        case \"REMOVE_TASK\": {\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\n            }\n        }\n        case \"ADD_TASK\": {\n            const newTask = {id: v1(), title: action.title, isDone: false}\n            return {\n                ...state,\n                [action.todoListId]: [newTask, ...state[action.todoListId]]\n            }\n        }\n        case \"CHANGE_TASK_STATUS\": {\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\n                    ...t,\n                    isDone: action.isDone\n                } : t),\n            }\n        }\n        case \"CHANGE_TASK_TITLE\": {\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\n                    ...t,\n                    title: action.newTitle\n                } : t),\n            }\n        }\n        case \"ADD-TODOLIST\": {\n            return {...state, [action.todolistId]: []}\n        }\n        case \"REMOVE-TODOLIST\": {\n            const copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        }\n        default:\n            return state\n    }\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodoListAC,\r\n} from \"./store/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport {TasksStateType} from \"./App\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    let todolists = useSelector<AppRootStateType, TodolistType[]>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string)=> {\r\n        dispatch (removeTaskAC(taskId, todolistId))\r\n    },[dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string)=> {\r\n        dispatch (addTaskAC(title, todolistId))\r\n    },[dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, isDone: boolean, todolistId: string)=> {\r\n        dispatch (changeTaskStatusAC(taskId, isDone, todolistId))\r\n    },[dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string)=> {\r\n        dispatch (changeTaskTitleAC(taskId, newTitle, todolistId))\r\n    },[dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string)=> {\r\n        dispatch (changeFilterAC(value, todolistId))\r\n    },[dispatch ])\r\n\r\n    const removeTodolist = useCallback((todoListID: string)=> {\r\n        const action = removeTodoListAC(todoListID)\r\n        dispatch (action)\r\n\r\n    },[dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string)=> {\r\n        dispatch (changeTodolistTitleAC(title, id))\r\n    },[dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) =>{\r\n        const action = addTodolistAC(title)\r\n        dispatch (action)\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TaskManager\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\nimport {todolistsReducer} from './todolists-reducer';\nimport {combineReducers, createStore} from 'redux';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><AppWithRedux/></Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}